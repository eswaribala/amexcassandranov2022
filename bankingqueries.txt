1. CREATE KEYSPACE IF NOT EXISTS abcbank WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy', 'datacenter1' : 1 };

2.CREATE KEYSPACEÂ abcbank
WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};

3.cqlsh> ALTER KEYSPACE abcbank WITH REPLICATION =
{'class' : 'NetworkTopologyStrategy', 'dc1' : 3, 'dc2' : 2};
Or if using SimpleStrategy:
cqlsh> ALTER KEYSPACE abcbank WITH REPLICATION =
{ 'class' : 'SimpleStrategy', 'replication_factor' : 2 };

3a.
If repair warning comes
run
nodetool repair --full

4. Drop keyspace abcbank;

5.CREATE TABLE abcbank.savings_account ( account_no bigint PRIMARY KEY, running_total bigint, open_date date, interest_rate float );
6.CREATE TABLE abcbank.current_account ( account_no bigint PRIMARY KEY, running_total bigint, open_date date, ovedraft_limit bigint );

7.CREATE TYPE abcbank.address_type (
door_no text,
street_name text,
city text,
state text
);

7.CREATE TABLE abcbank.individual ( account_no bigint PRIMARY KEY, name text, address address_type, contact_number bigint, email text, password text);

8.CREATE TABLE abcbank.corporate ( account_no bigint PRIMARY KEY, name text, address address_type, contact_number bigint, email text, password text, company_type text);

9. alter table abcbank.individual add (gender text,surname text,dob date);

10.CREATE TABLE abcbank.menu (menu_id bigint primary key,customer_list list<bigint>,account_list set<bigint>);

#composite partitionkey and primary key
11.CREATE TABLE abcbank.branch ( branch_id bigint, branch_name text, city text, state text, contact_number bigint, primary key((city,state),branch_id)) WITH CLUSTERING ORDER BY (state DESC);
;

#bulk insert 
sudo cqlsh 172.20.0.160:9042
In csv file keep date without ''
#import
COPY abcbank.savings_account(account_no,running_total,open_date,interest_rate) FROM '/savingsaccount.csv' WITH DELIMITER=',' AND HEADER=TRUE

#export
COPY abcbank.savings_account(account_no,running_total,open_date,interest_rate)  
TO '/data.csv' WITH HEADER = TRUE; 

#json insert
INSERT INTO savings_account JSON '{
"account_no" : 576657,
"running_total" : 7800,
"open_date" : "2007-09-12",
"interest_rate" : 0.8 }';

INSERT INTO abcbank.savings_account (
  account_no, running_total, open_date,interest_rate
) VALUES (
  20000, 34000, '2015-05-27', 0.8
)
USING TTL 86400;

#Limit
SELECT * From abcbank.savings_account LIMIT 1;

#where
SELECT running_total, open_date FROM abcgroup.savings_account WHERE  account_no= 100000;

#ALLOW Filtering

SELECT * FROM abcgroup.savings_account WHERE running_total=7800 ALLOW FILTERING;

#secondary index

CREATE INDEX running_total_idx ON savings_account (running_total);


#SASI
#Enable SASI Index true in cassandra.yaml
#restart cassandra

CREATE CUSTOM INDEX IF NOT EXISTS running_total_sec_idx ON savings_account (running_total) USING 'org.apache.cassandra.index.sasi.SASIIndex';


#Retrieving all columns in JSON format
select json running_total, open_date FROM abcbank.savings_account;
#Retrieving selected columns in JSON format
select running_total, toJson(open_date) from savings_account;




#bulk loader

wget https://github.com/yugabyte/cassandra-loader/releases/download/v0.0.27-yb-3/cassandra-loader

chmod a+x cassandra-loader

cassandra-loader -f savingsaccount.csv -host 172.20.0.160 -schema "abcgroup.savings_account(account_no,running_total,open_date,interest_date)"


#Full Repair

CREATE KEYSPACE CQLKeyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};

use cqlkeyspace;
CREATE TABLE t (id int, k int, v text, PRIMARY KEY (id) );
INSERT INTO t (id, k, v) VALUES (0, 0, 'val0');
INSERT INTO t (id, k, v) VALUES (1, 1, 'val1');
SELECT * FROM t;
ALTER KEYSPACE CQLKeyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 4};
#replication factor changed
nodetool repair -full cqlkeyspace t

#MV
CREATE TABLE base_table
(
Key1 int,
Col1 int,
Col2 int,
Col3 int,
Col4 text,
PRIMARY KEY (key1, Col1, Col2)
); 

Case-1:
CREATE MATERIALIZED VIEW test_MV1 AS 
SELECT * 
FROM test_MV1 
WHERE key1 IS NOT NULL 
      AND Col1 IS NOT NULL 
      AND Col2 IS NOT NULL 
PRIMARY KEY (Col1, key1, Col2);


Case-2:
CREATE MATERIALIZED VIEW test_MV2 AS 
SELECT * 
FROM test_MV2 
WHERE key1 IS NOT NULL 
      AND Col1 IS NOT NULL 
      AND Col2 IS NOT NULL 
      AND Col3 IS NOT NULL 
PRIMARY KEY (Col3, key1, Col1, Col2); 

#not allowed
Case-1:
CREATE MATERIALIZED VIEW test_MV1 AS 
SELECT * 
FROM test_MV2 
WHERE key1 IS NOT NULL 
      AND Col1 IS NOT NULL 
      AND Col2 IS NOT NULL 
      AND Col3 IS NOT NULL 
PRIMARY KEY (Col3, Col4, key1, Col1, Col2);  
 // * ERROR : it will give an error that Col3 
         and Col4 is not primary key in base table.

Case-2:
CREATE MATERIALIZED VIEW test_MV1 AS 
SELECT * 
FROM test_MV2 
WHERE Col1 IS NOT NULL 
      AND Col2 IS NOT NULL 
PRIMARY KEY (Col1, Col2);
// * ERROR : it will give an error that key1 is primary key 
    in base table that must contain in materialized view. 

#alter
ALTER MATERIALIZED VIEW [keyspace_name.] view_name 
[WITH table_options] 

 
